/*
 * CGTKStatusbar.swift
 * This file is part of CoreGTK
 *
 * Copyright (C) 2017 - Tyler Burton
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * Modified by the CoreGTK Team, 2016. See the AUTHORS file for a
 * list of people on the CoreGTK Team.
 * See the ChangeLog files for a list of changes.
 *
 */

@_exported import CGtk

public let GTK_TYPE_STATUSBAR: GType = gtk_statusbar_get_type()

@inline(__always) public func GTK_STATUSBAR(_ ptr: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<GtkStatusbar>! {
	return G_TYPE_CHECK_INSTANCE_CAST(ptr, GTK_TYPE_STATUSBAR)
}

/// A #GtkStatusbar is usually placed along the bottom of an application's
/// main #GtkWindow. It may provide a regular commentary of the application's
/// status (as is usually the case in a web browser, for example), or may be
/// used to simply output a message when the status changes, (when an upload
/// is complete in an FTP client, for example).
/// Status bars in GTK+ maintain a stack of messages. The message at
/// the top of the each bar’s stack is the one that will currently be displayed.
/// Any messages added to a statusbar’s stack must specify a
/// context id that is used to uniquely identify
/// the source of a message. This context id can be generated by
/// gtk_statusbar_get_context_id(), given a message and the statusbar that
/// it will be added to. Note that messages are stored in a stack, and when
/// choosing which message to display, the stack structure is adhered to,
/// regardless of the context identifier of a message.
/// One could say that a statusbar maintains one stack of messages for
/// display purposes, but allows multiple message producers to maintain
/// sub-stacks of the messages they produced (via context ids).
/// Status bars are created using gtk_statusbar_new().
/// Messages are added to the bar’s stack with gtk_statusbar_push().
/// The message at the top of the stack can be removed using
/// gtk_statusbar_pop(). A message can be removed from anywhere in the
/// stack if its message id was recorded at the time it was added. This
/// is done using gtk_statusbar_remove().
/// # CSS node
/// GtkStatusbar has a single CSS node with name statusbar.


open class CGTKStatusbar : CGTKBox {
	/// Creates a new #GtkStatusbar ready for messages.
	/// - Returns: CGTKWidget (GtkWidget*)
	public convenience init() {
		self.init(withGObject: gtk_statusbar_new())!
	}

	open var STATUSBAR: UnsafeMutablePointer<GtkStatusbar>! {
		get {
			return GTK_STATUSBAR(self.GOBJECT)
		}
	}

	/// Returns a new context identifier, given a description
	/// of the actual context. Note that the description is
	/// not shown in the UI.
	/// - Parameters:
	///	- contextDescription: String (const gchar*)
	/// - Returns: guint (guint)
	open func getContextId(contextDescription: String) -> guint {
		return gtk_statusbar_get_context_id(GTK_STATUSBAR(self.GOBJECT), contextDescription)
	}

	/// Retrieves the box containing the label widget.
	/// - Returns: CGTKWidget (GtkWidget*)
	open func getMessageArea<T>() -> T where T: CGTKWidget {
		return T.init(withGObject: gtk_statusbar_get_message_area(GTK_STATUSBAR(self.GOBJECT)))!
	}

	/// Removes the first message in the #GtkStatusbar’s stack
	/// with the given context id.
	/// Note that this may not change the displayed message, if
	/// the message at the top of the stack has a different
	/// context id.
	/// - Parameters:
	///	- contextId: guint (guint)
	open func pop(contextId: guint) -> Swift.Void {
		gtk_statusbar_pop(GTK_STATUSBAR(self.GOBJECT), contextId)
	}

	/// Pushes a new message onto a statusbar’s stack.
	/// - Parameters:
	///	- contextId: guint (guint)
	///	- text: String (const gchar*)
	/// - Returns: guint (guint)
	open func push(contextId: guint, text: String) -> guint {
		return gtk_statusbar_push(GTK_STATUSBAR(self.GOBJECT), contextId, text)
	}

	/// Forces the removal of a message from a statusbar’s stack.
	/// The exact @context_id and @message_id must be specified.
	/// - Parameters:
	///	- contextId: guint (guint)
	///	- messageId: guint (guint)
	open func remove(contextId: guint, messageId: guint) -> Swift.Void {
		gtk_statusbar_remove(GTK_STATUSBAR(self.GOBJECT), contextId, messageId)
	}

	/// Forces the removal of all messages from a statusbar's
	/// stack with the exact @context_id.
	/// - Parameters:
	///	- contextId: guint (guint)
	open func removeAll(contextId: guint) -> Swift.Void {
		gtk_statusbar_remove_all(GTK_STATUSBAR(self.GOBJECT), contextId)
	}

}
